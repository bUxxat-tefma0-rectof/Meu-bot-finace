const TelegramBot = require('node-telegram-bot-api');
const fs = require('fs');
const path = require('path');
require('dotenv').config();

const TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const ADMIN_ID = process.env.ADMIN_USER_ID;
const bot = new TelegramBot(TOKEN, { polling: true });

// Carregar dados
const db = JSON.parse(fs.readFileSync('database.json', 'utf8'));
const config = JSON.parse(fs.readFileSync('config.json', 'utf8'));
const products = JSON.parse(fs.readFileSync('products.json', 'utf8'));

console.log('ü§ñ Bot de Vendas Iniciado!');

// ========== FUN√á√ïES AUXILIARES ==========
function saveDB() {
    fs.writeFileSync('database.json', JSON.stringify(db, null, 2));
}

function saveProducts() {
    fs.writeFileSync('products.json', JSON.stringify(products, null, 2));
}

function getUser(chatId) {
    if (!db.users[chatId]) {
        db.users[chatId] = {
            id: chatId,
            balance: 0,
            purchases: [],
            deposits: [],
            gifts: [],
            affiliate: {
                code: generateAffiliateCode(),
                points: 0,
                referrals: []
            },
            registered_at: new Date().toISOString()
        };
        saveDB();
    }
    return db.users[chatId];
}

function generateAffiliateCode() {
    return Math.random().toString(36).substring(2, 8).toUpperCase();
}

// ========== TECLADOS ==========
const mainKeyboard = {
    reply_markup: {
        keyboard: [
            ['üíé Logins | Contas Premium', 'ü™™ Perfil'],
            ['üí∞ Recarga', 'üéñÔ∏è Ranking'],
            ['üë©‚Äçüíª Suporte', '‚ÑπÔ∏è Informa√ß√µes'],
            ['üîé Pesquisar Servi√ßos']
        ],
        resize_keyboard: true
    }
};

const profileKeyboard = {
    reply_markup: {
        keyboard: [
            ['üõçÔ∏è Hist√≥rico de Compras', '‚Ü©Ô∏è Voltar']
        ],
        resize_keyboard: true
    }
};

const backKeyboard = {
    reply_markup: {
        keyboard: [
            ['‚Ü©Ô∏è Voltar']
        ],
        resize_keyboard: true
    }
};

// ========== COMANDOS PRINCIPAIS ==========
bot.onText(/\/start/, (msg) => {
    const chatId = msg.chat.id;
    const user = getUser(chatId);
    
    const welcome = `ü•á *Descubra como nosso bot pode transformar sua experi√™ncia de compras!*

Ele facilita a busca por diversos produtos e servi√ßos, garantindo que voc√™ encontre o que precisa com o melhor pre√ßo e excelente custo-benef√≠cio.

*Importante:* N√£o realizamos reembolsos em dinheiro. O suporte estar√° dispon√≠vel por at√© 48 horas ap√≥s a entrega das informa√ß√µes, com reembolso em cr√©ditos no bot, se necess√°rio.

üë• *Grupo De Clientes:* ${config.bot.group_link}
üë®‚Äçüíª *Link De Suporte:* ${config.bot.support_link}

*‚ÑπÔ∏è Seus Dados:*
üÜî *ID:* ${user.id}
üí∏ *Saldo Atual:* R$ ${user.balance.toFixed(2)}
ü™™ *Usu√°rio:* ${msg.from.first_name}`;

    bot.sendMessage(chatId, welcome, {
        parse_mode: 'Markdown',
        ...mainKeyboard
    });
});

// ========== MENU PERFIL ==========
bot.onText(/ü™™ Perfil/, (msg) => {
    const chatId = msg.chat.id;
    const user = getUser(chatId);
    
    const profile = `üôã‚Äç‚ôÇÔ∏è *Meu Perfil*

üîé *Veja aqui os detalhes da sua conta:*

*üë§ Informa√ß√µes:*
üÜî *ID da Carteira:* ${user.id}
üí∞ *Saldo Atual:* R$ ${user.balance.toFixed(2)}

*üìä Suas movimenta√ß√µes:*
‚Äî üõí Compras Realizadas: ${user.purchases.length}
‚Äî üí† Pix Inseridos: ${user.deposits.length}
‚Äî üéÅ Gifts Resgatados: R$ ${user.gifts.reduce((acc, g) => acc + g.amount, 0).toFixed(2)}`;

    bot.sendMessage(chatId, profile, {
        parse_mode: 'Markdown',
        ...profileKeyboard
    });
});

// ========== HIST√ìRICO DE COMPRAS ==========
bot.onText(/üõçÔ∏è Hist√≥rico de Compras/, (msg) => {
    const chatId = msg.chat.id;
    const user = getUser(chatId);
    
    let history = `*HIST√ìRICO DETALHADO*
${config.bot.name}
_______________________

*COMPRAS:*
`;
    
    user.purchases.forEach((purchase, index) => {
        history += `\n${index + 1}. ${purchase.product} - R$ ${purchase.amount} - ${new Date(purchase.date).toLocaleDateString('pt-BR')}`;
    });
    
    history += `\n_______________________\n\n*PAGAMENTOS:*`;
    
    user.deposits.forEach((deposit, index) => {
        history += `\n${index + 1}. R$ ${deposit.amount} - ${new Date(deposit.date).toLocaleDateString('pt-BR')} - ${deposit.status}`;
    });
    
    // Enviar como arquivo de texto
    const filename = `historico_${chatId}.txt`;
    fs.writeFileSync(filename, history);
    
    bot.sendDocument(chatId, filename, {
        caption: 'üìä Seu hist√≥rico de compras e pagamentos'
    }).then(() => {
        fs.unlinkSync(filename);
    });
});

// ========== SISTEMA DE RECARGA ==========
bot.onText(/üí∞ Recarga/, (msg) => {
    const chatId = msg.chat.id;
    const user = getUser(chatId);
    
    const recharge = `üíº | *ID da Carteira:* ${user.id}
üíµ | *Saldo Dispon√≠vel:* R$ ${user.balance.toFixed(2)}

üí° *Selecione uma op√ß√£o para recarregar:*`;

    const rechargeKeyboard = {
        reply_markup: {
            keyboard: [
                ['üí≥ Stripe', '‚Ü©Ô∏è Voltar']
            ],
            resize_keyboard: true
        }
    };
    
    bot.sendMessage(chatId, recharge, {
        parse_mode: 'Markdown',
        ...rechargeKeyboard
    });
});

bot.onText(/üí≥ Stripe/, (msg) => {
    const chatId = msg.chat.id;
    
    bot.sendMessage(chatId, `‚ÑπÔ∏è *Informe o valor que deseja recarregar:*

üîª *Recarga m√≠nima:* R$ ${config.payments.min_deposit}
‚ö†Ô∏è *Por favor, envie o valor que deseja recarregar agora.*

*Exemplo:* 50 ou 37.50`, {
        parse_mode: 'Markdown'
    });
});

// Processar valor de recarga
bot.on('message', (msg) => {
    const chatId = msg.chat.id;
    const text = msg.text;
    
    // Verificar se √© um n√∫mero (valor de recarga)
    if (!isNaN(parseFloat(text)) && isFinite(text)) {
        const amount = parseFloat(text);
        
        if (amount < config.payments.min_deposit) {
            bot.sendMessage(chatId, `‚ùå *Valor abaixo do m√≠nimo!*\n\nRecarga m√≠nima: R$ ${config.payments.min_deposit}`, {
                parse_mode: 'Markdown'
            });
            return;
        }
        
        if (amount > config.payments.max_deposit) {
            bot.sendMessage(chatId, `‚ùå *Valor acima do m√°ximo!*\n\nRecarga m√°xima: R$ ${config.payments.max_deposit}`, {
                parse_mode: 'Markdown'
            });
            return;
        }
        
        // Simular processamento Stripe
        processStripePayment(chatId, amount);
    }
});

function processStripePayment(chatId, amount) {
    const user = getUser(chatId);
    
    bot.sendMessage(chatId, "‚è≥ *Gerando pagamento...*", { parse_mode: 'Markdown' });
    
    // Simular processamento
    setTimeout(() => {
        // Adicionar saldo
        user.balance += amount;
        user.deposits.push({
            amount: amount,
            date: new Date().toISOString(),
            method: 'stripe',
            status: 'completed'
        });
        
        saveDB();
        
        const successMsg = `‚úÖ *Pagamento confirmado!*

üí∏ *Valor recarregado:* R$ ${amount.toFixed(2)}
üí∞ *Novo saldo:* R$ ${user.balance.toFixed(2)}

Obrigado pela recarga! üéâ`;
        
        bot.sendMessage(chatId, successMsg, {
            parse_mode: 'Markdown',
            ...mainKeyboard
        });
    }, 3000);
}

// ========== SISTEMA DE PRODUTOS ==========
bot.onText(/üíé Logins \| Contas Premium/, (msg) => {
    const chatId = msg.chat.id;
    
    let productsList = `üéüÔ∏è *Logins Premium | Acesso Exclusivo*

üè¶ *Carteira*
üí∏ *Saldo Atual:* R$ ${getUser(chatId).balance.toFixed(2)}

*Produtos dispon√≠veis:*\n`;
    
    Object.keys(products).forEach(category => {
        productsList += `\nüìÅ *${category}*`;
        products[category].forEach(product => {
            productsList += `\n‚Ä¢ ${product.name} - R$ ${product.price}`;
        });
    });
    
    const productsKeyboard = {
        reply_markup: {
            keyboard: [
                ...Object.keys(products).map(category => [category]),
                ['‚Ü©Ô∏è Voltar']
            ],
            resize_keyboard: true
        }
    };
    
    bot.sendMessage(chatId, productsList, {
        parse_mode: 'Markdown',
        ...productsKeyboard
    });
});

// ========== SISTEMA DE PESQUISA ==========
bot.onText(/üîé Pesquisar Servi√ßos/, (msg) => {
    const chatId = msg.chat.id;
    
    bot.sendMessage(chatId, `üîç *Pesquisar Servi√ßos*

Digite o nome do servi√ßo que deseja procurar:

*Exemplo:* Netflix, Spotify, Disney+`, {
        parse_mode: 'Markdown'
    });
});

// Pesquisa de servi√ßos
bot.on('message', (msg) => {
    const chatId = msg.chat.id;
    const text = msg.text;
    
    // Ignorar comandos e mensagens muito curtas
    if (text.startsWith('/') || text.length < 3) return;
    
    const searchResults = searchProducts(text);
    
    if (searchResults.length > 0) {
        let resultsText = `üîç *Resultados para "${text}":*\n\n`;
        
        searchResults.forEach((product, index) => {
            resultsText += `${index + 1}. *${product.name}* - R$ ${product.price}\n`;
            resultsText += `   üì¶ Estoque: ${product.stock}\n`;
            resultsText += `   üìù ${product.description.substring(0, 50)}...\n\n`;
        });
        
        const productKeyboard = {
            reply_markup: {
                keyboard: [
                    ...searchResults.map(p => [p.name]),
                    ['‚Ü©Ô∏è Voltar']
                ],
                resize_keyboard: true
            }
        };
        
        bot.sendMessage(chatId, resultsText, {
            parse_mode: 'Markdown',
            ...productKeyboard
        });
    }
});

function searchProducts(query) {
    const results = [];
    const searchTerm = query.toLowerCase();
    
    Object.keys(products).forEach(category => {
        products[category].forEach(product => {
            if (product.name.toLowerCase().includes(searchTerm)) {
                results.push(product);
            }
        });
    });
    
    return results.slice(0, 5); // Limitar a 5 resultados
}

// ========== SISTEMA DE COMPRAS ==========
bot.on('message', (msg) => {
    const chatId = msg.chat.id;
    const text = msg.text;
    const user = getUser(chatId);
    
    // Verificar se √© um produto v√°lido
    const product = findProductByName(text);
    
    if (product) {
        showProductDetails(chatId, user, product);
    }
});

function findProductByName(name) {
    for (const category in products) {
        const product = products[category].find(p => p.name === name);
        if (product) return product;
    }
    return null;
}

function showProductDetails(chatId, user, product) {
    const productInfo = `‚öúÔ∏è *ACESSO:* ${product.name}

üíµ *Pre√ßo:* R$ ${product.price}
üíº *Saldo Atual:* R$ ${user.balance.toFixed(2)}
üì• *Estoque Dispon√≠vel:* ${product.stock}

üóíÔ∏è *Descri√ß√£o:* ${product.description}

*Aviso Importante:*
O acesso √© disponibilizado na hora. N√£o atendemos liga√ß√µes nem ouvimos mensagens de √°udio; pedimos que aguarde sua vez.
Informamos que n√£o realizamos reembolsos via Pix, apenas em cr√©ditos no bot, correspondendo aos dias restantes at√© o vencimento.
Agradecemos pela compreens√£o e desejamos boas compras!

‚ôªÔ∏è *Garantia:* ${product.warranty} dias`;

    const buyKeyboard = {
        reply_markup: {
            keyboard: [
                ['üõí Comprar', '‚Ü©Ô∏è Voltar']
            ],
            resize_keyboard: true
        }
    };
    
    bot.sendMessage(chatId, productInfo, {
        parse_mode: 'Markdown',
        ...buyKeyboard
    });
}

bot.onText(/üõí Comprar/, (msg) => {
    const chatId = msg.chat.id;
    const user = getUser(chatId);
    
    // Aqui voc√™ implementaria a l√≥gica de compra real
    // Por enquanto, vamos simular uma compra
    
    if (user.balance < 10) { // Exemplo de pre√ßo
        bot.sendMessage(chatId, `‚ùå *Saldo insuficiente!*

Faltam: R$ ${(10 - user.balance).toFixed(2)}
Seu saldo: R$ ${user.balance.toFixed(2)}

Fa√ßa uma recarga e tente novamente.`, {
            parse_mode: 'Markdown'
        });
        return;
    }
    
    // Simular compra bem-sucedida
    user.balance -= 10;
    user.purchases.push({
        product: "Produto Exemplo",
        amount: 10,
        date: new Date().toISOString()
    });
    
    saveDB();
    
    bot.sendMessage(chatId, `‚úÖ *Compra realizada com sucesso!*

üõí *Produto:* Produto Exemplo
üí∏ *Valor:* R$ 10,00
üí∞ *Saldo restante:* R$ ${user.balance.toFixed(2)}

üìß *Email:* exemplo@email.com
üîë *Senha:* ********

Aproveite sua compra! üéâ`, {
        parse_mode: 'Markdown',
        ...mainKeyboard
    });
});

// ========== COMANDOS ADICIONAIS ==========
bot.onText(/\/afiliados/, (msg) => {
    const chatId = msg.chat.id;
    const user = getUser(chatId);
    
    const affiliateInfo = `üéóÔ∏è *Sistema de Afiliados*

*‚ÑπÔ∏è Status:* ${config.affiliate.enabled ? 'üü¢ ATIVO' : 'üî¥ INATIVO'}
üìä *Comiss√£o por Indica√ß√£o:* ${(config.affiliate.multiplier * 100)}%
üë• *Total de Afiliados:* ${user.affiliate.referrals.length}
üîó *Link para Indicar:* https://t.me/${config.bot.name.replace('@', '')}?start=${user.affiliate.code}

*Como Funciona?*
Copie seu link de indica√ß√£o e envie para outras pessoas.
Cada vez que algu√©m indicado por voc√™ fizer uma recarga no bot, voc√™ receber√° uma porcentagem desse valor!

*Exemplo:* Com uma comiss√£o de ${(config.affiliate.multiplier * 100)}%, se 5 pessoas indicadas recarregarem R$10,00 cada, voc√™ receber√° R$ ${(5 * 10 * config.affiliate.multiplier).toFixed(2)}.

Indique mais e aumente seus ganhos! üí∞`;
    
    bot.sendMessage(chatId, affiliateInfo, {
        parse_mode: 'Markdown'
    });
});

bot.onText(/\/id/, (msg) => {
    const chatId = msg.chat.id;
    bot.sendMessage(chatId, `üÜî *Seu ID √©:* ${chatId}`, {
        parse_mode: 'Markdown'
    });
});

// ========== VOLTAR ==========
bot.onText(/‚Ü©Ô∏è Voltar/, (msg) => {
    const chatId = msg.chat.id;
    bot.sendMessage(chatId, "Menu principal:", mainKeyboard);
});

console.log('‚úÖ Bot de vendas rodando perfeitamente!');
